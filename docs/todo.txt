TODO

make a static AABB object and a static (+dynamic?) circle object for cronotest

collision detection!
basic algo:
for each object A that updated this frame:
 update A's position on global grid
 for each static & dynamic colliding object B:
  if A can't overlap or collide with B:
   break
  if A was already tested against B this frame:
   break
  update B's position on global grid
  if B's box doesn't overlap A's box:
   break
  if narrowphase collision check fails:
   break
  if A has an overlap interaction with B:
   tell A & B the other overlaps
   (if overlap just started or ended, callback)
  elif A has a collision interaction with B:
   resolve collision (moving one or both objects)
   tell A & B the other is colliding
   (if collide just started or ended, callback)

- 2D only, each colliding object has a single layer
- Renderable.collision_layer: -1 means no collision, >=0 means use that layer for collision
-- make sure this should be a property of Renderable and not Art or GameObject
- for simplicity, all collision layers are resolved as if they were on the same Z
- each Renderable can have "display collision layer" toggled for debug
-- collision layer Z can be set to anything in edit mode, but always rendered at 0 in game mode
- dynamic objects can (should?) have circle or AABB collision
- broadphase: bounding boxes of each gameobject art
- narrowphase: how to detect and resolve collisions? the hard part :]

game mode improvements:
- concept of "selected game object"
-- floating label showing name
-- object positioning mode/control - W/E/R for move/rotate/scale?
-- generic properties window to edit an instance's properties?
-- some way to save out the state changes brought about by this?  probably better to think of this as a full-on level editing mode D:

sorting: is basing sort entirely on Y position sufficient?
- split cronotest1 scene into multiple objects if need be

---

further work on existing features:

menu bar - when alt pressed, grey/darker bg on character that is an item's accelerator

PNG export:
- CRT off/on affects PNG output, according to a scale factor.
-- arg 1 of export console command = scale factor override, default is Nx
- aniGIF export for animations - lead: http://compgroups.net/comp.lang.python/save-animated-gif-in-python-image-library/1632384

main popup
- "use global settings" toggle for tools with an "affects X" mask - when true, setting one of the current tool's masks changes all tool's masks
- ability to "pin" popup so it stays on screen always
- arrow keys navigate between char and color pickers properly

shift-O: toggle between perspective and ortho views (steal unity's cool lerp)

human-readable errors if charset/palette not found

if psci files get too huge, compress em with python's zipfile module (different extension needed?) as the json zips extraordinarily well

mockup for frame/layer matrix - is this still needed now that onion skin + layer pulldown list give a pretty good-enough view of this data?

should game dirs have their own palettes/, charsets/ etc subdirs?
