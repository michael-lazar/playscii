TODO

current tasks:

- "play mode", hides debug stuff like markers and triggers, disables camera nav
- when renaming rooms/objects, search for and correct references eg warps

keyboard nav should scroll list box at bottom!

crash: place object, rename it, exit room (can't repro now?!)

"used" sound for consumable pickups gets immediately cut off by destroy

"rooms" concept - standardized object that contains/manages:
- support dynamically generated room definitions a la ELC2 as well as predefined

fix object drag - probably inheriting bugs from Cursor.screen_to_world :[
-- on mouse click, write dict of {obj_name:(xoff,yoff)} of offsets from mouse to each dragged object's origin
-- on mouse move, update object's loc to mouse + its offset
-- on mouse unclick, wipe object offset dict

use new file chooser for:
- convert image (any format supported by PIL)
- create palette from image (same)
- game dir (only show dirs in app/games/ and ~/documents/games/)

collision:
- AABB support (sometimes perfectly flat edges are needed)

- Art "instance" capabilities, so a script can change one object using the same as another without affecting both
-- write Art.copy to create an instance, save a reference to source, "restore" method
-- GameObject has its own "run script once / every N seconds" function which talks to its art instance, also function which calls art instance's "restore"
-- "save as" should create a new editable art in the session, not replace current one


---

new features / major improvements:

grid for game mode? extends in all directions up to a reasonable limit

"movement context" for handling movement/physics:
- move accel, max velocity, stop velocity, gravity (if not global), friction, "specific-axis" bool

game distribution system:
- create new project: auto-create a class file with a stub GameObject subclass?
- ideal is something like LOVE does: single file you can associate with playscii and click to open
- possibly helpful: http://pysdl2.readthedocs.org/en/latest/modules/sdl2ext_resources.html

more complete example games:
- tetris - implementation of classic, all blocks drawn into a single Art, everything else implemented in a GameHUD (and maybe some background art)

collision:
- broadphase (tile system)
- AABB support (sometimes perfectly flat edges are needed)
- integrate AARR support

proper help screen:
- one screen of high level stuff, other screens are a generated listing of binds - use a given bind's function's __doc__ string

brushes:
- user-defined(?) ramps of characters
- painting with a brush puts down characters sampled from ramp:
-- sample randomly
-- sample based on # of tiles painted since click
-- sample based on pressure (possible with SDL2?)
- how is this data stored?  values are charset-specific

line definitions:
- user-defined(?) rules for which tile to use based on tiles painted since start of paint (click)
- probably shares some code with brushes

standard useful paint tools: draw line, flood fill

- if psci files get too huge, compress em with python's zipfile module (different extension needed?) as the json zips extraordinarily well
-- or just create a binary format that isn't broken like EDSCII's was? probably best to do once file format has stabilized
--- don't save "blank" tiles at all - determine a global/default FG/BG for majority of tiles

---

fixes / minor improvements:

- weird hang when an art's palette is a non-palette file, eg cloud_ocean.jpg

room UI:
- add/remove selected objects from room
- add/remove rooms from an object's list: choose from list of rooms

game distribution: if autoplay_this_game is set, create a separate CFG file and don't create playscii documents/ + cache directories

generalized (works for any type of file, not just arts) file chooser:
- edit mode "set art" should invoke art file chooser
- draw a solid black char in scrollbar relative to where selection is in total item list.  clicking in scrollbar sets scroll index to there (can a button report where exactly it was clicked? just get mouse coords in screen tile space?)

detect GPUs/GL versions that won't run CRT shader well and auto-disable it in CFG?
- determine which setups would work better with this, and work out how to detect them reliably

volume support for playing sound FX
fade in/out support for music

undo/redo for adding or removing frames and layers :/

menu bar - when alt pressed, grey/darker bg on character that is an item's accelerator

main popup
- "use global settings" toggle for tools with an "affects X" mask - when true, setting one of the current tool's masks changes all tool's masks
- ability to "pin" popup so it stays on screen always
- arrow keys navigate between char and color pickers properly

- allow user to set view background color (per-art? in game world?)

shift-O: toggle between perspective and ortho views (steal unity's cool lerp)

state load / live reload: is there a way to determine when a class default has been changed and should / shouldn't override serialized data?

exporters for:
- C64 PRG file: single layer, C64 res (48x35 / 40x25) - see source of PETSCII editor http://www.kameli.net/marq/?page_id=2717 which does this
- ENDOOM (DOS charset, EGA palette)
- ASCII/ANSI art scene formats
