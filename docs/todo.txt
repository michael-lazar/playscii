TODO

current tasks:

enumerate specific bugs with below and fix em

generalized (works for any type of file, not just arts) file chooser:
x left and right go up and into selected dir where applicable
x get dir list every update so FS changes show up immediately?
- text pathname field, clicking a new file in list fills it in (clicking again opens it)
- hitting enter with a valid filename opens it, hitting enter with a valid pathname navigates list view to that dir
- for non-arts (eg convert image) show image preview
- remove debug prints in ui_dialog and ui_chooser_dialog
- pgup/pgdn move pages up and down for long lists
- draw a solid black char in scrollbar relative to where selection is in total item list.  clicking in scrollbar sets scroll index to there (can a button report where exactly it was clicked? just get mouse coords in screen tile space?)


- Art "instance" capabilities, so a script can change one object using the same as another without affecting both
-- write Art.copy to create an instance, save a reference to source, "restore" method
-- GameObject has its own "run script once / every N seconds" function which talks to its art instance, also function which calls art instance's "restore"
-- "save as" should create a new editable art in the session, not replace current one

---

new features / major improvements:

audio:
- stream music from OGG/whatever
- load sound FX into memory and play em from game code

more complete example games:
- endless ladder climbing HD (5th anniversary edition) - side view game with multiple screens, art that modifies itself to shift colors, uses collision for ground and overlap for ladder, anims for player states
- tetris - implementation of classic game, all blocks drawn into a single Art, everything else implemented in a GameHUD (and maybe some background art)

collision:
- broadphase (tile system)
- integrate AARR support

proper help screen:
- one screen of high level stuff, other screens are a generated listing of binds - use a given bind's function's __doc__ string

brushes:
- user-defined(?) ramps of characters
- painting with a brush puts down characters sampled from ramp:
-- sample randomly
-- sample based on # of tiles painted since click
-- sample based on pressure (possible with SDL2?)
- how is this data stored?  values are charset-specific

line definitions:
- user-defined(?) rules for which tile to use based on tiles painted since start of paint (click)
- probably shares some code with brushes

- if psci files get too huge, compress em with python's zipfile module (different extension needed?) as the json zips extraordinarily well
-- or just create a binary format that isn't broken like EDSCII's was? probably best to do once file format has stabilized
--- don't save "blank" tiles at all - determine a global/default FG/BG for majority of tiles

---

fixes / minor improvements:

undo/redo for adding or removing frames and layers :/

menu bar - when alt pressed, grey/darker bg on character that is an item's accelerator

main popup
- "use global settings" toggle for tools with an "affects X" mask - when true, setting one of the current tool's masks changes all tool's masks
- ability to "pin" popup so it stays on screen always
- arrow keys navigate between char and color pickers properly

- allow user to set view background color (per-art? in game world?)

shift-O: toggle between perspective and ortho views (steal unity's cool lerp)

state load / live reload: is there a way to determine when a class default has been changed and should / shouldn't override serialized data?

exporters for:
- C64 PRG file: single layer, C64 res (48x35 / 40x25)
- ENDOOM (DOS charset, EGA palette)
- ASCII/ANSI art scene formats
